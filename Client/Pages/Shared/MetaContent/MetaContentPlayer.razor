@using MyVideoResume.Abstractions.MetaContent
@using MyVideoResume.Data.Models.MetaContent
@inject IJSRuntime jsRuntime
<RadzenStack Orientation="Orientation.Vertical">
    <RadzenCard Variant="Variant.Outlined">
        <video id=@Identifier controls class="video-js">
            <p class="vjs-no-js">
                To view this video please enable JavaScript, and consider upgrading to a
                web browser that
                <a href="https://videojs.com/html5-video-support/" target="_blank">
                    supports HTML5 video
                </a>
            </p>
        </video>
    </RadzenCard>
</RadzenStack>


@code {
    [Parameter] public MetaDataDTO MetaData { get; set; }
    public string Identifier { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Identifier = $"M{MetaData.Id.ToString().Replace("-", "")}";
        StateHasChanged();

        if (firstRender)
        {
            if (MetaData.MetaType == MetaType.YouTube || MetaData.MetaType == MetaType.VideoMP4 || MetaData.MetaType == MetaType.VideoWebM)
            {
                if (MetaData.MetaType == MetaType.YouTube)
                {
                    await jsRuntime.InvokeVoidAsync("loadPlayer", Identifier, new
                    {
                        controls = true,
                        autoplay = false,
                        preload = "auto",
                        width = 515,
                        height = 264,
                        techOrder = new[] { "youtube" },
                        sources = new[] {
                        new { type =  "video/youtube", src = MetaData.Url }
                }
                    });
                }

                if (MetaData.MetaType == MetaType.VideoMP4)
                {
                    await jsRuntime.InvokeVoidAsync("loadPlayer", Identifier, new
                    {
                        controls = true,
                        autoplay = false,
                        preload = "auto",
                        width = 560,
                        height = 264,
                        sources = new[] {
                        new { type =  "video/mp4", src = MetaData.Url }
                }
                    });

                }
            }
        }
    }
}