@using BlazorTemplater
@using Markdig
@using MyVideoResume.Abstractions.Core
@using MyVideoResume.Abstractions.Job
@using MyVideoResume.Abstractions.Resume
@using MyVideoResume.Client.Pages.App.People.Resumes.Templates
@using MyVideoResume.Client.Services.FeatureFlag
@using MyVideoResume.Data.Models.Jobs
@using System.Text.Json
@using MyVideoResume.Data.Models.Resume
@inherits BaseComponent

<RadzenSteps Change="@OnChange" @ref=@Steps SelectedIndex=@SelectedStep Style="width:100%">
    <Steps>
        <RadzenStepsItem Text="Add Resume">
            <RadzenRow Style="width:100%">
                <RadzenCard Variant="Variant.Outlined">
                    <ResumeUploadComponent UploadCompleted=@UploadCompletedHandler></ResumeUploadComponent>
                    <RadzenHtmlEditor @bind-Value=@Content style="height: 375px; width:100%;">
                        <RadzenHtmlEditorUndo />
                        <RadzenHtmlEditorRedo />
                        <RadzenHtmlEditorSeparator />
                        <RadzenHtmlEditorBold />
                        <RadzenHtmlEditorItalic />
                        <RadzenHtmlEditorUnderline />
                        <RadzenHtmlEditorStrikeThrough />
                        <RadzenHtmlEditorSeparator />
                    </RadzenHtmlEditor>

                </RadzenCard>
            </RadzenRow>
        </RadzenStepsItem>
        <RadzenStepsItem Text="Run Match">
            <RadzenRow>
                <div hidden=@(!ShowMatchProcessingError)><span style="color:red"><strong>Error Processing Match.</strong></span></div>
                <RadzenButton IsBusy=@Busy Text="Process Match" Click=@(()=> ProcessJobMatch())></RadzenButton>
            </RadzenRow>
        </RadzenStepsItem>
        <RadzenStepsItem Text="See Results">
            <RadzenRow style="padding: 5px">
                <RadzenColumn>
                    <RadzenText TextStyle="TextStyle.H2">Score: @MatchScore</RadzenText>
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow>
                <RadzenHtmlEditor @bind-Value=@MatchContent style="height: 375px; width:100%;">
                    <RadzenHtmlEditorUndo />
                    <RadzenHtmlEditorRedo />
                    <RadzenHtmlEditorSeparator />
                    <RadzenHtmlEditorBold />
                    <RadzenHtmlEditorItalic />
                    <RadzenHtmlEditorUnderline />
                    <RadzenHtmlEditorStrikeThrough />
                    <RadzenHtmlEditorSeparator />
                </RadzenHtmlEditor>
            </RadzenRow>
        </RadzenStepsItem>
    </Steps>
</RadzenSteps>

@code {
    [Inject] public JobWebService JobService { get; set; }
    [Inject] public ResumeWebService ResumeService { get; set; }
    [Inject] public MatchWebService MatchWebService { get; set; }
    [Parameter] public JobItemDTO Item { get; set; }
    public string Content { get; set; }
    public ResumeInformationDTO ExtractedResume { get; set; }
    public string MatchContent { get; set; }
    public float MatchScore { get; set; }
    public RadzenSteps Steps { get; set; }
    public int SelectedStep { get; set; } = 0;
    public bool Busy { get; set; }
    public bool ShowMatchProcessingError { get; set; } = false;

    async Task OnChange(int index)
    {
        if (!Content.HasValue())
        {
            SelectedStep = 0;
        }
    }


    protected async Task ProcessJobMatch()
    {
        Busy = true;
        if (Content.HasValue())
        {
            var serialized = JsonSerializer.Serialize<JobItemDTO>(Item);
            var result = await MatchWebService.MatchByJobResumeContent(serialized, ExtractedResume.ResumeSerialized);
            if (result.ErrorMessage.HasValue())
            {
                ShowMatchProcessingError = true;
            }
            else
            {
                ShowMatchProcessingError = false;
                SelectedStep = 2;
                var matchResult = result.Result;
                if (matchResult != null)
                {
                    MatchContent = Markdown.ToHtml(matchResult.SummaryRecommendations);
                    MatchScore = matchResult.Score;
                }
            }
        }
        Busy = false;
    }

    [Parameter] public EventCallback<string> JobCreated { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }


    async Task UploadCompletedHandler(ResponseResult<ResumeInformationDTO> result)
    {
        if (result.ErrorMessage.HasValue())
        {
            ShowErrorNotification("Failed Processing Resume", string.Empty);
        }
        else
        {
            ExtractedResume = result.Result;

            var resumeText = new ComponentRenderer<BasicTemplate>()
            .AddService<FeatureFlagClientService>(FeatureFlagService)
            .AddService<MenuService>(MenuService)
            .AddService<NavigationManager>(NavigationManager)
            .AddService<AuthenticationStateProvider>(AuthenticationStateProvider)
            .AddService<HttpClient>(Http)
            .AddService<IJSRuntime>(JSRuntime)
            .AddService<DialogService>(DialogService)
            .AddService<TooltipService>(TooltipService)
            .AddService<ContextMenuService>(ContextMenuService)
            .AddService<NotificationService>(NotificationService)
            .AddService<SecurityWebService>(Security)
            .Set(c => c.Resume, result.Result)
            .Render();

            Content = resumeText;
        }
    }

}
