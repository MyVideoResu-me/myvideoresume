@page "/schedule"
@inherits TaskBaseComponent
@layout MainLayout
@using MyVideoResume.Abstractions.Productivity
@using MyVideoResume.Abstractions.Core


<PageTitle>MyVideoResu.ME - Schedule</PageTitle>
<HeadContent>
    <meta name="description" content="View and Plan your schedule. Organize interviews. Plan your strategy." />
</HeadContent>
<RadzenRow>
    <RadzenColumn Size="12">
        <RadzenText Text="Schedule" TextStyle="Radzen.Blazor.TextStyle.DisplayH2" TagName="Radzen.Blazor.TagName.Auto"></RadzenText>
        <RadzenCard>
            <RadzenRow>
                <RadzenColumn>
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem" class="rz-p-4 rz-mb-6 rz-border-radius-1" Style="border: var(--rz-grid-cell-border);">
                        <RadzenLabel Text="Schedule Start Month:" />
                        <RadzenSelectBar @bind-Value="@startMonth" TextProperty="Text" ValueProperty="Value" Data="@(Enum.GetValues(typeof(Month)).Cast<Month>().Select(t => new { Text = $"{t}", Value = t }))" Size="ButtonSize.Small" class="rz-display-xl-flex" />
                    </RadzenStack>

                    <RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender style="height: 768px;" TItem="IProductivityItem" Data=@Items StartProperty="Start" EndProperty="End" TextProperty="Text" SelectedIndex="1" SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender MonthSelect=@OnMonthSelect>
                        <RadzenMonthView />
                        <RadzenYearPlannerView StartMonth="@startMonth" />
                        <RadzenYearTimelineView StartMonth="@startMonth" />
                        <RadzenYearView StartMonth="@startMonth" />
                    </RadzenScheduler>
                </RadzenColumn>
            </RadzenRow>
        </RadzenCard>
    </RadzenColumn>
</RadzenRow>

@code {
    RadzenScheduler<IProductivityItem> scheduler;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();
    Month startMonth = (Month)DateTime.Now.Month;

    // Using Items from TaskBaseComponent instead of hardcoded appointments

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: var(--rz-scheduler-highlight-background-color, rgba(255,220,40,.2));";
        }

        // Draw a line for new year if start month is not January
        if ((args.View.Text == "Planner" || args.View.Text == "Timeline") && args.Start.Month == 12 && startMonth != Month.January)
        {
            args.Attributes["style"] = "border-bottom: thick double var(--rz-base-600);";
        }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        //       Logger.Log($"SlotSelect: Start={args.Start} End={args.End}");

        if (args.View.Text != "Year")
        {
            TaskDTO data = await DialogService.OpenAsync<AddTaskPage>("Add Task",
                new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });

            if (data != null)
            {
                Items.Add(data);
                // Either call the Reload method or reassign the Data property of the Scheduler
                await scheduler.Reload();
            }
        }
    }

    async Task OnMonthSelect(SchedulerMonthSelectEventArgs args)
    {
        //     console.Log($"MonthSelect: MonthStart={args.MonthStart} AppointmentCount={args.Appointments.Count()}");
        await Task.CompletedTask;
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<IProductivityItem> args)
    {
        //   console.Log($"AppointmentSelect: Appointment={args.Data.Text}");

        await DialogService.OpenAsync<EditTaskPage>("Edit Task", new Dictionary<string, object> { { "Task", args.Data } });
        
        // Reload tasks from service to get updated data
        Items = await Service.TasksRead();
        await scheduler.Reload();
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<IProductivityItem> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop
        
        if (args.Data is TaskDTO task)
        {
            // Color-code based on task status
            switch (task.Status)
            {
                case ProductivityItemStatus.ToDo:
                    args.Attributes["style"] = "background: #ffc107; color: #000;"; // Yellow
                    break;
                case ProductivityItemStatus.InProgress:
                    args.Attributes["style"] = "background: #007bff; color: #fff;"; // Blue
                    break;
                case ProductivityItemStatus.Closed:
                    args.Attributes["style"] = "background: #28a745; color: #fff;"; // Green
                    break;
                case ProductivityItemStatus.Planning:
                    args.Attributes["style"] = "background: #6c757d; color: #fff;"; // Gray
                    break;
                default:
                    args.Attributes["style"] = "background: #17a2b8; color: #fff;"; // Teal
                    break;
            }
        }
    }
}
