@inherits TaskBaseComponent

<RadzenTemplateForm TItem="TaskDTO" Data="@model" Submit=@OnSubmit>
    <RadzenStack Gap="1rem">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
            <RadzenLabel Text="Title" Style="width: 4rem;" />
            <RadzenTextBox @bind-Value="@model.Text" Name="Text" Style="width: 12rem;" />
            <RadzenRequiredValidator Component="Text" Text="Title is required" />
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
            <RadzenLabel Text="Description" Style="width: 4rem;" />
            <RadzenTextArea @bind-Value="@model.Description" Name="Description" Style="width: 12rem;" />
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
            <RadzenLabel Text="Start" Style="width: 4rem;" />
            <RadzenDatePicker @bind-Value="@model.Start" Name="Start" ShowTime="true" Style="width: 12rem;" />
            <RadzenRequiredValidator Component="Start" Text="Start is required" />
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
            <RadzenLabel Text="End" Style="width: 4rem;" />
            <RadzenDatePicker Name="End" @bind-Value="@model.End" ShowTime="true" Style="width: 12rem;" />
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
            <RadzenLabel Text="Type" Style="width: 4rem;" />
            <RadzenDropDown @bind-Value="@model.TaskType" Data="@taskTypes" ValueProperty="Value" TextProperty="Text" Style="width: 12rem;" />
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
            <RadzenLabel Text="Status" Style="width: 4rem;" />
            <RadzenDropDown @bind-Value="@model.Status" Data="@statusOptions" ValueProperty="Value" TextProperty="Text" Style="width: 12rem;" />
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End">
            <RadzenButton ButtonType="ButtonType.Submit" Text="Save" />
        </RadzenStack>
    </RadzenStack>
</RadzenTemplateForm>

@code {
    [Parameter] public DateTime Start { get; set; }
    [Parameter] public DateTime End { get; set; }

    TaskDTO model = new TaskDTO();
    
    List<dynamic> taskTypes = Enum.GetValues(typeof(TaskType)).Cast<TaskType>()
        .Select(t => new { Text = t.ToString(), Value = t }).ToList<dynamic>();
    
    List<dynamic> statusOptions = Enum.GetValues(typeof(ProductivityItemStatus)).Cast<ProductivityItemStatus>()
        .Select(s => new { Text = s.ToString(), Value = s }).ToList<dynamic>();

    protected override void OnParametersSet()
    {
        model.Start = Start;
        model.End = End ?? Start.AddHours(1);
        model.TaskType = TaskType.General;
        model.Status = ProductivityItemStatus.ToDo;
        model.CreatedByUserId = Security.User?.Id;
        model.AssignedToUserId = Security.User?.Id ?? "";
    }

    async Task OnSubmit(TaskDTO model)
    {
        var result = await Service.TaskSave(model);
        if (result.ErrorMessage.HasValue())
        {
            ShowErrorNotification("Failed to Save Task", result.ErrorMessage);
        }
        else
        {
            ShowSuccessNotification("Task Created", "Task has been created successfully");
            DialogService.Close(result.Data);
        }
    }
}
