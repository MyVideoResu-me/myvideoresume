@inherits TaskBaseComponent

<div style="float:right">
    <RadzenSplitButton Icon="add_circle" Click=@(args => OnClick(args)) Text="Create Task" ButtonStyle="ButtonStyle.Danger">
        <ChildContent>
            <RadzenSplitButtonItem Icon="public" Text="Using AI" Value="ai" />
        </ChildContent>
    </RadzenSplitButton>
</div>

@code {
    [Parameter] public EventCallback<string> Created { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected async Task OnClick(RadzenSplitButtonItem args)
    {
        if (Security.IsNotAuthenticated())
        {
            var result = await ShowUnAuthorized(Paths.Tasks_View);
        }
        else
        {
            if (args == null) // Regular task creation
            {
                var result = await DialogService.OpenAsync<AddTaskPage>("Create Task",
                    new Dictionary<string, object>()
                    {
                        { "Start", DateTime.Now }
                    },
                    new DialogOptions()
                    {
                        Width = "500px",
                        Height = "auto",
                        CloseDialogOnEsc = true,
                        CloseDialogOnOverlayClick = false
                    });

                if (result != null)
                {
                    await Created.InvokeAsync(result.ToString());
                }
            }
            else if (args?.Value == "ai")
            {
                // AI-based task creation logic will go here
                // For now, we'll use the same dialog as regular task creation
                var result = await DialogService.OpenAsync<AddTaskPage>("Create Task with AI",
                    new Dictionary<string, object>()
                    {
                        { "Start", DateTime.Now }
                    },
                    new DialogOptions()
                    {
                        Width = "500px",
                        Height = "auto",
                        CloseDialogOnEsc = true,
                        CloseDialogOnOverlayClick = false
                    });

                if (result != null)
                {
                    await Created.InvokeAsync(result.ToString());
                }
            }
        }
    }
}
