@page "/people"@inherits PeopleBaseComponent@layout MainLayout<PageTitle>MyVideoResu.ME - People</PageTitle><RadzenRow>    <RadzenColumn Size="11">        <CreatePeopleOptionsComponent Created=@Created></CreatePeopleOptionsComponent>        <RadzenText Text="People" TextStyle="Radzen.Blazor.TextStyle.DisplayH2" TagName="Radzen.Blazor.TagName.Auto"></RadzenText>        <RadzenCard>            <AuthorizeView>                <Authorized>                    <RadzenDataGrid Visible=@ShowGrid Responsive=true AllowFiltering="false" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" Data="@Items" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single" @bind-Value=@SelectedItems>                        <Columns>                            <RadzenDataGridColumn Width="50px" Title="#" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">                                <Template Context="data">                                    @(Items.IndexOf(data) + 1)                                </Template>                            </RadzenDataGridColumn>                            <RadzenDataGridColumn Property="@nameof(UserProfileDTO.FirstName)" Title="Item" Frozen="true">                                <Template Context="data">                                    <div style=" max-width: 250px; "><RadzenText style="text-overflow:ellipsis; white-space: nowrap; overflow: hidden;" TextStyle="TextStyle.Body1" title="@(data.FirstName)">@(data.FirstName)</RadzenText></div>                                </Template>                            </RadzenDataGridColumn>                            <RadzenDataGridColumn Width="75px" Property="@nameof(UserProfileDTO.CreationDateTime)" Title="Date Created" Frozen="false" />                            <RadzenDataGridColumn Title="Actions" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Frozen="false">                                <Template Context="data">                                    <PeopleActionsPanelComponent Item=data Deleted=DeleteCompletedHandler></PeopleActionsPanelComponent>                                </Template>                            </RadzenDataGridColumn>                        </Columns>                    </RadzenDataGrid>                </Authorized>                <NotAuthorized>                    <UnAuthorizedComponent Path=@Paths.Resume_View></UnAuthorizedComponent>                </NotAuthorized>            </AuthorizeView>        </RadzenCard>    </RadzenColumn></RadzenRow>@code {    public bool ShowGrid { get; set; } = true;
    public bool ShowPreview { get { return !ShowGrid; } }
    List<UserProfileDTO> Items { get; set; } = new List<UserProfileDTO>();
    IList<UserProfileDTO> SelectedItems { get; set; } = new List<UserProfileDTO>();    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // if (Security.IsAuthenticated())
        //     Items = await Account..GetTasks();
    }



    public bool DisplayItem(TaskDTO item)
    {
        var result = false;
        result = item.CreatedByUserId == Security.User.Id;
        return result;
    }

    protected async Task Delete(UserProfileDTO item)
    {
        var result = new ResponseResult();
        result = await Account.Delete(item.Id);
        await ShowNotification(result);
    }

    private async Task ShowNotification(ResponseResult result)
    {
        if (result.ErrorMessage.HasValue())
        {
            ShowErrorNotification("Failed to Delete", string.Empty);
        }
        else
        {
            ShowSuccessNotification("Job Deleted", string.Empty);
            //Items = await Service.GetTasks();
        }
    }

    async Task DeleteCompletedHandler(ResponseResult result)
    {
        await ShowNotification(result);
    }


    protected async Task Created(string result)
    {
        // if (result.HasValue())
        //     Items = await Service.GetTasks();
    }
}