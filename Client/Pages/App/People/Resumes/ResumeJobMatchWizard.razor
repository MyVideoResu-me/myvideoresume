@using BlazorTemplater
@using Markdig
@using MyVideoResume.Abstractions.Resume
@using MyVideoResume.Client.Services.FeatureFlag
@using System.Text.Json
@using MyVideoResume.Data.Models.Jobs

@inherits BaseComponent

<RadzenSteps Change="@OnChange" @ref=@Steps>
    <Steps>
        <RadzenStepsItem Text="Add Job">
            <RadzenRow>
                <RadzenStack Orientation="Orientation.Vertical">
                    <RadzenText Text="Enter the Website (URL) of the Job Description" />
                    <div hidden=@(!ShowUrlError)><span style="color:red"><strong>Website (URL) is required.</strong></span></div>
                </RadzenStack>
            </RadzenRow>
            <RadzenTextBox Placeholder="https://somewebsitejob.com/" @bind-Value=@JobUrl />
        </RadzenStepsItem>
        <RadzenStepsItem Text="Review Job">
            <RadzenRow>
                @if (FailToLoadJob)
                {
                    <span style="color:red"><strong>The Website (url) entered has blocked the request.</strong></span>

                    <div> Please Copy and Paste the Job Description below.</div>
                }
                <RadzenHtmlEditor @bind-Value=@JobContent style="height: 375px; width:450px;" @ref=@Editor>
                    <RadzenHtmlEditorUndo />
                    <RadzenHtmlEditorRedo />
                    <RadzenHtmlEditorSeparator />
                    <RadzenHtmlEditorBold />
                    <RadzenHtmlEditorItalic />
                    <RadzenHtmlEditorUnderline />
                    <RadzenHtmlEditorStrikeThrough />
                    <RadzenHtmlEditorSeparator />
                </RadzenHtmlEditor>
            </RadzenRow>
        </RadzenStepsItem>
        <RadzenStepsItem Text="Run Match">
            <RadzenRow>
                <div hidden=@(!ShowMatchProcessingError)><span style="color:red"><strong>Error Processing Match.</strong></span></div>
                <RadzenButton IsBusy=@Busy Text="Process Match" Click=@(()=> ProcessJobMatch())></RadzenButton>
            </RadzenRow>
        </RadzenStepsItem>
        <RadzenStepsItem Text="See Results">
            <RadzenRow style="padding: 5px">
                <RadzenColumn>
                    <RadzenText TextStyle="TextStyle.H2">Score: @MatchScore</RadzenText>
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow>
                <RadzenHtmlEditor @bind-Value=@MatchContent style="height: 375px; width:450px;" @ref=@Editor>
                    <RadzenHtmlEditorUndo />
                    <RadzenHtmlEditorRedo />
                    <RadzenHtmlEditorSeparator />
                    <RadzenHtmlEditorBold />
                    <RadzenHtmlEditorItalic />
                    <RadzenHtmlEditorUnderline />
                    <RadzenHtmlEditorStrikeThrough />
                    <RadzenHtmlEditorSeparator />
                </RadzenHtmlEditor>
            </RadzenRow>
        </RadzenStepsItem>
    </Steps>
</RadzenSteps>

@code {
    [Inject] public MatchWebService MatchService { get; set; }
    [Inject] public JobWebService JobService { get; set; }
    [Inject] public ResumeWebService ResumeService { get; set; }
    [Inject] protected JobWebService JobWebService { get; set; }
    [Parameter] public ResumeSummaryItem ResumeSummaryItem { get; set; }
    public string JobUrl { get; set; }
    public string JobContent { get; set; }
    public string MatchContent { get; set; }
    public float MatchScore { get; set; }
    public bool FailToLoadJob { get; set; } = false;
    public JobItemEntity ExtractedJob { get; set; }
    public RadzenHtmlEditor Editor { get; set; }
    public RadzenSteps Steps { get; set; }
    public bool Busy { get; set; }
    public bool ShowUrlError { get; set; } = false;
    public bool ShowMatchProcessingError { get; set; } = false;

    async Task OnChange(int index)
    {
        if (index == 1)
        {
            if (JobUrl.HasValue())
            {
                var result = await JobService.Extract(JobUrl);
                if (result.ErrorMessage.HasValue())
                {
                    FailToLoadJob = true;
                    Steps.SelectedIndex = 1;
                }
                else
                {
                    ExtractedJob = JsonSerializer.Deserialize<JobItemEntity>(result.Result.JobSerialized, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

                    var htmlText = new ComponentRenderer<MyVideoResume.Client.Pages.App.Jobs.Template.BasicTemplate>()
                    .AddService<JobWebService>(JobWebService)
                    .AddService<FeatureFlagClientService>(FeatureFlagService)
                    .AddService<MenuService>(MenuService)
                    .AddService<NavigationManager>(NavigationManager)
                    .AddService<AuthenticationStateProvider>(AuthenticationStateProvider)
                    .AddService<HttpClient>(Http)
                    .AddService<IJSRuntime>(JSRuntime)
                    .AddService<DialogService>(DialogService)
                    .AddService<TooltipService>(TooltipService)
                    .AddService<ContextMenuService>(ContextMenuService)
                    .AddService<NotificationService>(NotificationService)
                    .AddService<SecurityWebService>(Security)
                    .Set(c => c.Item, ExtractedJob)
                    .Render();

                    JobContent = htmlText;
                }
                ShowUrlError = false;
            }
            else
            {
                Steps.SelectedIndex = 0;
                ShowUrlError = true;
            }
        }
        else if (index == 2)
        {

        }
        else if (index == 3)
        {
            if (JobContent.HasValue() && !MatchContent.HasValue())
            {
                ProcessJobMatch();
            }
        }
    }


    protected async Task ProcessJobMatch()
    {
        Busy = true;
        if (JobContent.HasValue())
        {
            var content = JobContent;
            if (ExtractedJob != null)
                content = ExtractedJob.JobSerialized;

            var result = await MatchService.MatchByJobContentResumeId(content, ResumeSummaryItem.Id);
            if (result.ErrorMessage.HasValue())
            {
                ShowMatchProcessingError = true;
            }
            else
            {
                ShowMatchProcessingError = false;
                Steps.SelectedIndex = 3;
                var matchResponse = result.Result;
                if (matchResponse != null)
                {
                    MatchContent = Markdown.ToHtml(matchResponse.SummaryRecommendations);
                    MatchScore = matchResponse.Score;
                }
            }
        }
        Busy = false;
    }

    [Parameter] public EventCallback<string> JobCreated { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }
}
