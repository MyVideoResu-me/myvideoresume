@using MyVideoResume.Data.Models.Resume
@inherits BaseComponent

<div style="float:right">
    <RadzenSplitButton Icon="add_circle" Click=@(args => OnClick(args)) Text="Create Resume" ButtonStyle="ButtonStyle.Danger">
        <ChildContent>
            <RadzenSplitButtonItem Icon="picture_as_pdf" Text="Upload PDF" Value="pdf" />
            <RadzenSplitButtonItem Icon="note_add" Text="Upload MS Word" Value="word" />
            <RadzenSplitButtonItem Icon="upload" Text="Upload JSON" Value="json" />
            <RadzenSplitButtonItem Icon="construction" Text="Resume Builder" Value="builder" Visible=@Service.IsResumeBuilderEnabled />
        </ChildContent>
    </RadzenSplitButton>
</div>

@code {
    [Inject] public FeatureFlagClientService Service { get; set; }
    [Parameter] public EventCallback<ResponseResult<ResumeInformationEntity>> ResumeCreated { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected async Task OnClick(RadzenSplitButtonItem args)
    {
        if (Security.IsNotAuthenticated())
        {
            await ShowUnAuthorized(Paths.Resume_View);
        }
        else
        {
            if ((args == null || args?.Value == "builder") && Service.IsResumeBuilderEnabled)
            {
                NavigateTo(Paths.Resume_CreateNew);
            }
            else
            {
                if (args == null || args?.Value == "pdf" || args?.Value == "json" || args?.Value == "word")
                {
                    var result = await DialogService.OpenAsync("Upload File to Create Resume", ds =>
    @<RadzenCard Variant="Variant.Outlined">
        <ResumeUploadComponent UploadCompleted=@UploadCompletedHandler></ResumeUploadComponent>
    </RadzenCard>
            );
                }
            }
        }
    }

    async Task UploadCompletedHandler(ResponseResult<ResumeInformationEntity> result)
    {
        if (result.ErrorMessage.HasValue())
        {
            ShowErrorNotification("Failed Creating Resume", string.Empty);
        }
        else
        {
            DialogService.Close();
            ShowSuccessNotification("Resume Created", string.Empty);
        }

        if (ResumeCreated.HasDelegate)
            await ResumeCreated.InvokeAsync(result);

    }
}
