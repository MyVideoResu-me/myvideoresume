@inherits ResumeComponent
<RadzenPanel>
    <RadzenButton style="margin: 5px" Text="View" Icon="preview" Visible=@(!DisableView) Click=@(()=>ViewAction(Item)) />
    <RadzenButton style="margin: 5px" Text="Edit" Icon="edit" Visible=@(DisplayItem(Item) && FeatureFlagService.IsResumeBuilderEnabled) Click=@(()=>EditAction(Item)) />
    <RadzenButton style="margin: 5px" Text="Delete" Icon="delete" Visible=@DisplayItem(Item) Click=@(()=>DeleteAction(Item)) />
    <RadzenButton style="margin: 5px" Icon="download" Text="JSON" Visible=@DisplayItem(Item) Click=@(()=>JsonAction(Item)) />
    <RadzenButton style="margin: 5px" Icon="download" Text="Html" Visible=@DisplayItem(Item) Click=@(()=>HtmlAction(Item)) />
    <RadzenButton style="margin: 5px" Text="Share" Icon="share" Click=@(()=>ShareAction(Item)) />
    <RadzenButton style="margin: 5px" Text="Sentiment Analysis" Icon="mood" Visible=@DisplayItem(Item) Click=@(()=>OpenSentimentAnalysis(Item)) />
    <RadzenButton style="margin: 5px" Text="Job Match" Icon="join_inner" Visible=@DisplayItem(Item) Click=@(()=>OpenJobMatchAnalysis(Item)) />
</RadzenPanel>
@code
{
    [Parameter] public IResumeItem Item { get; set; }
    [Parameter] public bool DisableView { get; set; } = false;
    [Parameter] public EventCallback<ResponseResult> Deleted { get; set; }

    public bool DisplayItem(IResumeItem item)
    {
        var result = false;
        result = item.UserId == Security.User.Id;
        return result;
    }

    protected async Task JsonAction(IResumeItem item)
    {

        //Call Web Service and Get the RESUME JSON
        ShowInformationNotification("Processing", "Request Queued to be processed");
        var resultJson = await ResumeWebService.GetResume(item.Id);
        if (resultJson != null)
        {
            _ = DownloadAsJson(resultJson.MetaResume as JSONResume);
        }
        ShowSuccessNotification("Processed", "Check downloads");

    }

    protected async Task ShareAction(IResumeItem item)
    {
        var url = $"{NavigationManager.BaseUri}resumes/{item.Id}";
        var result = await ShowShareOptions(url, "resume, myvideoresume", "MyVideoResu.ME");
    }

    protected async Task ViewAction(IResumeItem item)
    {
        NavigateTo("resumes", item.Id);
    }

    protected async Task EditAction(IResumeItem item)
    {
        NavigateTo("resumes/builder", item.Id);
    }

    protected async Task HtmlAction(IResumeItem item)
    {
        //Call Web Service and Get the RESUME JSON
        ShowInformationNotification("Processing", "Request Queued to be processed");
        var resultHtml = await ResumeWebService.GetResume(item.Id);
        if (resultHtml != null)
        {
            _ = DownloadAsHtml(resultHtml.MetaResume as JSONResume);
        }
        ShowSuccessNotification("Processed", "Check downloads");
    }


    protected async Task DeleteAction(IResumeItem item)
    {
        //Confirm Dialogue and if true then Delete...
        var confirm = await DialogService.Confirm("Are you sure?", "Delete", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
        if (confirm.HasValue && confirm.Value)
        {
            var result = new ResponseResult();
            result = await ResumeWebService.Delete(item.Id);
            if (result.ErrorMessage.HasValue())
            {
                ShowErrorNotification("Failed to Delete", string.Empty);
            }
            else
            {
                ShowSuccessNotification("Resume Deleted", string.Empty);
                if (Deleted.HasDelegate)
                    await Deleted.InvokeAsync(result);
            }
        }
        DialogService.Close();
    }

    protected async Task OpenJobMatchAnalysis(IResumeItem item)
    {
        var result = await DialogService.OpenAsync("Job Match", ds =>
    @<ResumeJobMatchWizardComponent ResumeSummaryItem=@item></ResumeJobMatchWizardComponent>
                                                                                                                                                                                          );
    }
}